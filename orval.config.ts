import { defineConfig } from 'orval';

export default defineConfig({
  rest: {
    input: {
      target: './docs/swagger.json',
      override: {
        transformer: (schema) => {
          // Remove the websocket path so it doesn't get generated in REST
          delete schema.paths['/ws'];
          return schema;
        },
      },
    },
    output: {
      mode: 'tags-split',
      target: './src/services/endpoints',
      schemas: './src/services/schemas',
      client: 'react-query',
      clean: true,
      override: {
        mutator: {
          path: './src/services/axios-config.ts',
          name: 'axiosInstance',

        }
      }
    },
  },
  websocket: {
    input: {
      target: './docs/swagger.json',
      override: {
        transformer: (schema) => {
          // Keep only websocket path and enhance with WebSocket-specific schemas
          const wsPath = schema.paths['/ws'];
          if (wsPath) {
            // Add WebSocket-specific response schemas to the components
            if (!schema.components) schema.components = {};
            if (!schema.components.schemas) schema.components.schemas = {};

            // Add WebSocket message schemas
            schema.components.schemas['WebSocketMessage'] = {
              type: 'object',
              required: ['id', 'type', 'data', 'timestamp', 'user_id'],
              properties: {
                id: { type: 'string', description: 'Unique message identifier' },
                type: {
                  type: 'string',
                  enum: [
                    'connection.connect', 'connection.disconnect', 'connection.ping', 'connection.pong',
                    'channel.join', 'channel.leave', 'channel.message', 'channel.typing', 'channel.stop_typing',
                    'channel.member.join', 'channel.member.leave', 'user.status', 'user.notification', 'error'
                  ],
                  description: 'Message type enum'
                },
                data: { type: 'object', description: 'Message payload data' },
                timestamp: { type: 'number', description: 'Unix timestamp' },
                user_id: { type: 'string', description: 'User ID who sent the message' }
              }
            };

            schema.components.schemas['ChannelMessageData'] = {
              type: 'object',
              required: ['channel_id', 'text'],
              properties: {
                channel_id: { type: 'string' },
                text: { type: 'string' },
                url: { type: 'string', nullable: true },
                fileName: { type: 'string', nullable: true }
              }
            };

            schema.components.schemas['TypingIndicatorData'] = {
              type: 'object',
              required: ['channel_id', 'is_typing'],
              properties: {
                channel_id: { type: 'string' },
                is_typing: { type: 'boolean' }
              }
            };

            schema.components.schemas['ErrorData'] = {
              type: 'object',
              required: ['code', 'message'],
              properties: {
                code: { type: 'string' },
                message: { type: 'string' },
                details: { type: 'string' }
              }
            };
          }

          schema.paths = { '/ws': wsPath };
          return schema;
        },
      },
    },
    output: {
      target: 'src/services/websocket/index.ts',
      client: 'axios', // doesn't matter, replaced by mutator
      clean: true,
      override: {
        mutator: {
          path: './src/services/wsMutator.ts',
          name: 'createWebSocketClient',
        },
        // Generate additional type-safe hooks and utilities
        operations: {
          getWs: {
            mutator: './src/services/wsMutator.ts',
          }
        },
        // Custom header to include additional imports
        header: (info) => [
          '/**',
          ` * Generated by orval v${info.version} üç∫`,
          ' * Do not edit manually.',
          ` * ${info.title}`,
          ` * ${info.description}`,
          ` * OpenAPI spec version: ${info.version}`,
          ' */',
          '',
          '// WebSocket Type-Safe Client',
          'import { TypeSafeWebSocketClient, ConnectionState, WebSocketClientConfig, WebSocketEventListeners } from \'../wsMutator\';',
          'import { MessageType, WsBaseMessage, ChannelMessageData, TypingIndicatorData, ErrorData } from \'../types/wsTypes\';',
          '',
          '// Re-export types for convenience',
          'export { MessageType, ConnectionState, WebSocketClientConfig, WebSocketEventListeners };',
          'export type { WsBaseMessage, ChannelMessageData, TypingIndicatorData, ErrorData };',
          '',
        ].join('\n'),
      },
    },
  },
});
