/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 */
import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetChatsChannelId401,
  GetChatsChannelId404,
  GetChatsChannelId500,
  ModelsChatRequest,
  ModelsChatResponse,
  PostChats400,
  PostChats401,
  PostChats500
} from '../../schemas';





/**
 * Create a new chat message (channel or direct)
 * @summary Create a new chat message
 */
export const postChats = (
    modelsChatRequest: ModelsChatRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ModelsChatResponse>> => {
    
    
    return axios.post(
      `/chats/`,
      modelsChatRequest,options
    );
  }



export const getPostChatsMutationOptions = <TError = AxiosError<PostChats400 | PostChats401 | PostChats500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChats>>, TError,{data: ModelsChatRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postChats>>, TError,{data: ModelsChatRequest}, TContext> => {

const mutationKey = ['postChats'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChats>>, {data: ModelsChatRequest}> = (props) => {
          const {data} = props ?? {};

          return  postChats(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChatsMutationResult = NonNullable<Awaited<ReturnType<typeof postChats>>>
    export type PostChatsMutationBody = ModelsChatRequest
    export type PostChatsMutationError = AxiosError<PostChats400 | PostChats401 | PostChats500>

    /**
 * @summary Create a new chat message
 */
export const usePostChats = <TError = AxiosError<PostChats400 | PostChats401 | PostChats500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChats>>, TError,{data: ModelsChatRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postChats>>,
        TError,
        {data: ModelsChatRequest},
        TContext
      > => {

      const mutationOptions = getPostChatsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get all chat messages for a specific channel
 * @summary Get chat messages in a channel
 */
export const getChatsChannelId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ModelsChatResponse[]>> => {
    
    
    return axios.get(
      `/chats/channel/${id}`,options
    );
  }


export const getGetChatsChannelIdQueryKey = (id: number,) => {
    return [`/chats/channel/${id}`] as const;
    }

    
export const getGetChatsChannelIdQueryOptions = <TData = Awaited<ReturnType<typeof getChatsChannelId>>, TError = AxiosError<GetChatsChannelId401 | GetChatsChannelId404 | GetChatsChannelId500>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getChatsChannelId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetChatsChannelIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatsChannelId>>> = ({ signal }) => getChatsChannelId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatsChannelId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetChatsChannelIdQueryResult = NonNullable<Awaited<ReturnType<typeof getChatsChannelId>>>
export type GetChatsChannelIdQueryError = AxiosError<GetChatsChannelId401 | GetChatsChannelId404 | GetChatsChannelId500>


/**
 * @summary Get chat messages in a channel
 */

export function useGetChatsChannelId<TData = Awaited<ReturnType<typeof getChatsChannelId>>, TError = AxiosError<GetChatsChannelId401 | GetChatsChannelId404 | GetChatsChannelId500>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getChatsChannelId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetChatsChannelIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



