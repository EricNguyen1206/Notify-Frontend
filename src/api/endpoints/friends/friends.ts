/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Chat Service API
 * A real-time chat service API with WebSocket support for instant messaging, user management, friend system, and channel management.
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetFriends200,
  GetFriends401,
  GetFriends500,
  PostFriends200,
  PostFriends400,
  PostFriends401,
  PostFriends500,
  PostFriendsBody
} from '../../schemas';





/**
 * Get the list of friends for the current user
 * @summary Get user's friends
 */
export const getFriends = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFriends200>> => {
    
    
    return axios.get(
      `/friends/`,options
    );
  }


export const getGetFriendsQueryKey = () => {
    return [`/friends/`] as const;
    }

    
export const getGetFriendsQueryOptions = <TData = Awaited<ReturnType<typeof getFriends>>, TError = AxiosError<GetFriends401 | GetFriends500>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFriends>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFriendsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFriends>>> = ({ signal }) => getFriends({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFriends>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFriendsQueryResult = NonNullable<Awaited<ReturnType<typeof getFriends>>>
export type GetFriendsQueryError = AxiosError<GetFriends401 | GetFriends500>


/**
 * @summary Get user's friends
 */

export function useGetFriends<TData = Awaited<ReturnType<typeof getFriends>>, TError = AxiosError<GetFriends401 | GetFriends500>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFriends>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetFriendsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Send a friend request to another user
 * @summary Add a friend
 */
export const postFriends = (
    postFriendsBody: PostFriendsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostFriends200>> => {
    
    
    return axios.post(
      `/friends/`,
      postFriendsBody,options
    );
  }



export const getPostFriendsMutationOptions = <TError = AxiosError<PostFriends400 | PostFriends401 | PostFriends500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFriends>>, TError,{data: PostFriendsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postFriends>>, TError,{data: PostFriendsBody}, TContext> => {

const mutationKey = ['postFriends'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFriends>>, {data: PostFriendsBody}> = (props) => {
          const {data} = props ?? {};

          return  postFriends(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFriendsMutationResult = NonNullable<Awaited<ReturnType<typeof postFriends>>>
    export type PostFriendsMutationBody = PostFriendsBody
    export type PostFriendsMutationError = AxiosError<PostFriends400 | PostFriends401 | PostFriends500>

    /**
 * @summary Add a friend
 */
export const usePostFriends = <TError = AxiosError<PostFriends400 | PostFriends401 | PostFriends500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFriends>>, TError,{data: PostFriendsBody}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postFriends>>,
        TError,
        {data: PostFriendsBody},
        TContext
      > => {

      const mutationOptions = getPostFriendsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    