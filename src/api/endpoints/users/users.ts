/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Chat Service API
 * A real-time chat service API with WebSocket support for instant messaging, user management, friend system, and channel management.
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  useQuery
} from 'react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetUsersProfile401,
  GetUsersProfile500,
  ModelsUserResponse
} from '../../schemas';





/**
 * Get the current user's profile information
 * @summary Get user profile
 */
export const getUsersProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ModelsUserResponse>> => {
    
    
    return axios.get(
      `/users/profile`,options
    );
  }


export const getGetUsersProfileQueryKey = () => {
    return [`/users/profile`] as const;
    }

    
export const getGetUsersProfileQueryOptions = <TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = AxiosError<GetUsersProfile401 | GetUsersProfile500>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersProfile>>> = ({ signal }) => getUsersProfile({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersProfile>>>
export type GetUsersProfileQueryError = AxiosError<GetUsersProfile401 | GetUsersProfile500>


/**
 * @summary Get user profile
 */

export function useGetUsersProfile<TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = AxiosError<GetUsersProfile401 | GetUsersProfile500>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersProfileQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



