/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Chat Service API
 * A real-time chat service API with WebSocket support for instant messaging, user management, friend system, and channel management.
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  useQuery
} from 'react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetWs400,
  GetWsParams
} from '../../schemas';





/**
 * Establish a WebSocket connection for real-time messaging
 * @summary WebSocket connection
 */
export const getWs = (
    params: GetWsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.get(
      `/ws`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetWsQueryKey = (params: GetWsParams,) => {
    return [`/ws`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWsQueryOptions = <TData = Awaited<ReturnType<typeof getWs>>, TError = AxiosError<void | GetWs400>>(params: GetWsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWs>>> = ({ signal }) => getWs(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWsQueryResult = NonNullable<Awaited<ReturnType<typeof getWs>>>
export type GetWsQueryError = AxiosError<void | GetWs400>


/**
 * @summary WebSocket connection
 */

export function useGetWs<TData = Awaited<ReturnType<typeof getWs>>, TError = AxiosError<void | GetWs400>>(
 params: GetWsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



