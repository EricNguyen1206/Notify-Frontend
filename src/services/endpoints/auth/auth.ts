/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Notify Chat Service API
 * A RESTful API service for chat functionality
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ChatServiceInternalModelsErrorResponse,
  ChatServiceInternalModelsLoginRequest,
  ChatServiceInternalModelsLoginResponse,
  ChatServiceInternalModelsRegisterRequest,
  ChatServiceInternalModelsUserResponse
} from '../../schemas';

import { axiosInstance } from '../../axios-config';




/**
 * Authenticate user with email and password
 * @summary User login
 */
export const postAuthLogin = (
    chatServiceInternalModelsLoginRequest: ChatServiceInternalModelsLoginRequest,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsLoginResponse>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: chatServiceInternalModelsLoginRequest, signal
    },
      );
    }
  


export const getPostAuthLoginMutationOptions = <TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: ChatServiceInternalModelsLoginRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: ChatServiceInternalModelsLoginRequest}, TContext> => {

const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: ChatServiceInternalModelsLoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = ChatServiceInternalModelsLoginRequest
    export type PostAuthLoginMutationError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse

    /**
 * @summary User login
 */
export const usePostAuthLogin = <TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: ChatServiceInternalModelsLoginRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: ChatServiceInternalModelsLoginRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Register a new user with username, email, and password
 * @summary Register a new user
 */
export const postAuthRegister = (
    chatServiceInternalModelsRegisterRequest: ChatServiceInternalModelsRegisterRequest,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsUserResponse>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: chatServiceInternalModelsRegisterRequest, signal
    },
      );
    }
  


export const getPostAuthRegisterMutationOptions = <TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: ChatServiceInternalModelsRegisterRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: ChatServiceInternalModelsRegisterRequest}, TContext> => {

const mutationKey = ['postAuthRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRegister>>, {data: ChatServiceInternalModelsRegisterRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRegister>>>
    export type PostAuthRegisterMutationBody = ChatServiceInternalModelsRegisterRequest
    export type PostAuthRegisterMutationError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse

    /**
 * @summary Register a new user
 */
export const usePostAuthRegister = <TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: ChatServiceInternalModelsRegisterRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRegister>>,
        TError,
        {data: ChatServiceInternalModelsRegisterRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    