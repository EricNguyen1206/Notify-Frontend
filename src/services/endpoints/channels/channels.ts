/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  DeleteChannelsId200,
  DeleteChannelsId401,
  DeleteChannelsId500,
  DeleteChannelsIdUser200,
  DeleteChannelsIdUser400,
  DeleteChannelsIdUser401,
  DeleteChannelsIdUser500,
  DeleteChannelsIdUserBody,
  GetChannels401,
  GetChannels500,
  GetChannelsId401,
  GetChannelsId404,
  ModelsChannelListResponse,
  ModelsChannelResponse,
  PostChannels400,
  PostChannels401,
  PostChannels500,
  PostChannelsBody,
  PostChannelsIdUser200,
  PostChannelsIdUser400,
  PostChannelsIdUser401,
  PostChannelsIdUser500,
  PostChannelsIdUserBody,
  PutChannelsId200,
  PutChannelsId400,
  PutChannelsId401,
  PutChannelsId500,
  PutChannelsIdBody,
  PutChannelsIdUser200,
  PutChannelsIdUser401,
  PutChannelsIdUser500
} from '../../schemas';

import { axiosInstance } from '../../axios-config';




/**
 * Get all channels that the current user is a member of
 * @summary Get user's channels
 */
export const getChannels = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ModelsChannelListResponse[]>(
      {url: `/channels/`, method: 'GET', signal
    },
      );
    }
  

export const getGetChannelsQueryKey = () => {
    return [`/channels/`] as const;
    }

    
export const getGetChannelsQueryOptions = <TData = Awaited<ReturnType<typeof getChannels>>, TError = GetChannels401 | GetChannels500>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getChannels>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetChannelsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannels>>> = ({ signal }) => getChannels(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChannels>>, TError, TData> & { queryKey: QueryKey }
}

export type GetChannelsQueryResult = NonNullable<Awaited<ReturnType<typeof getChannels>>>
export type GetChannelsQueryError = GetChannels401 | GetChannels500


/**
 * @summary Get user's channels
 */

export function useGetChannels<TData = Awaited<ReturnType<typeof getChannels>>, TError = GetChannels401 | GetChannels500>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getChannels>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetChannelsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new channel with the specified name
 * @summary Create a new channel
 */
export const postChannels = (
    postChannelsBody: PostChannelsBody,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ModelsChannelResponse>(
      {url: `/channels/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postChannelsBody, signal
    },
      );
    }
  


export const getPostChannelsMutationOptions = <TError = PostChannels400 | PostChannels401 | PostChannels500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChannels>>, TError,{data: PostChannelsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postChannels>>, TError,{data: PostChannelsBody}, TContext> => {

const mutationKey = ['postChannels'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChannels>>, {data: PostChannelsBody}> = (props) => {
          const {data} = props ?? {};

          return  postChannels(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChannelsMutationResult = NonNullable<Awaited<ReturnType<typeof postChannels>>>
    export type PostChannelsMutationBody = PostChannelsBody
    export type PostChannelsMutationError = PostChannels400 | PostChannels401 | PostChannels500

    /**
 * @summary Create a new channel
 */
export const usePostChannels = <TError = PostChannels400 | PostChannels401 | PostChannels500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChannels>>, TError,{data: PostChannelsBody}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postChannels>>,
        TError,
        {data: PostChannelsBody},
        TContext
      > => {

      const mutationOptions = getPostChannelsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get detailed information about a specific channel
 * @summary Get channel by ID
 */
export const getChannelsId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ModelsChannelResponse>(
      {url: `/channels/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetChannelsIdQueryKey = (id: number,) => {
    return [`/channels/${id}`] as const;
    }

    
export const getGetChannelsIdQueryOptions = <TData = Awaited<ReturnType<typeof getChannelsId>>, TError = GetChannelsId401 | GetChannelsId404>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getChannelsId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetChannelsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannelsId>>> = ({ signal }) => getChannelsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChannelsId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetChannelsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getChannelsId>>>
export type GetChannelsIdQueryError = GetChannelsId401 | GetChannelsId404


/**
 * @summary Get channel by ID
 */

export function useGetChannelsId<TData = Awaited<ReturnType<typeof getChannelsId>>, TError = GetChannelsId401 | GetChannelsId404>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getChannelsId>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetChannelsIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update the name of an existing channel
 * @summary Update channel
 */
export const putChannelsId = (
    id: number,
    putChannelsIdBody: PutChannelsIdBody,
 ) => {
      
      
      return axiosInstance<PutChannelsId200>(
      {url: `/channels/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putChannelsIdBody
    },
      );
    }
  


export const getPutChannelsIdMutationOptions = <TError = PutChannelsId400 | PutChannelsId401 | PutChannelsId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putChannelsId>>, TError,{id: number;data: PutChannelsIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putChannelsId>>, TError,{id: number;data: PutChannelsIdBody}, TContext> => {

const mutationKey = ['putChannelsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putChannelsId>>, {id: number;data: PutChannelsIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putChannelsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutChannelsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putChannelsId>>>
    export type PutChannelsIdMutationBody = PutChannelsIdBody
    export type PutChannelsIdMutationError = PutChannelsId400 | PutChannelsId401 | PutChannelsId500

    /**
 * @summary Update channel
 */
export const usePutChannelsId = <TError = PutChannelsId400 | PutChannelsId401 | PutChannelsId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putChannelsId>>, TError,{id: number;data: PutChannelsIdBody}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putChannelsId>>,
        TError,
        {id: number;data: PutChannelsIdBody},
        TContext
      > => {

      const mutationOptions = getPutChannelsIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Delete a channel (only channel owner can delete)
 * @summary Delete channel
 */
export const deleteChannelsId = (
    id: number,
 ) => {
      
      
      return axiosInstance<DeleteChannelsId200>(
      {url: `/channels/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteChannelsIdMutationOptions = <TError = DeleteChannelsId401 | DeleteChannelsId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteChannelsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteChannelsId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteChannelsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteChannelsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteChannelsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteChannelsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteChannelsId>>>
    
    export type DeleteChannelsIdMutationError = DeleteChannelsId401 | DeleteChannelsId500

    /**
 * @summary Delete channel
 */
export const useDeleteChannelsId = <TError = DeleteChannelsId401 | DeleteChannelsId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteChannelsId>>, TError,{id: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteChannelsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteChannelsIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Remove the current user from a channel
 * @summary Leave channel
 */
export const putChannelsIdUser = (
    id: number,
 ) => {
      
      
      return axiosInstance<PutChannelsIdUser200>(
      {url: `/channels/${id}/user`, method: 'PUT'
    },
      );
    }
  


export const getPutChannelsIdUserMutationOptions = <TError = PutChannelsIdUser401 | PutChannelsIdUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putChannelsIdUser>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putChannelsIdUser>>, TError,{id: number}, TContext> => {

const mutationKey = ['putChannelsIdUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putChannelsIdUser>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  putChannelsIdUser(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutChannelsIdUserMutationResult = NonNullable<Awaited<ReturnType<typeof putChannelsIdUser>>>
    
    export type PutChannelsIdUserMutationError = PutChannelsIdUser401 | PutChannelsIdUser500

    /**
 * @summary Leave channel
 */
export const usePutChannelsIdUser = <TError = PutChannelsIdUser401 | PutChannelsIdUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putChannelsIdUser>>, TError,{id: number}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof putChannelsIdUser>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPutChannelsIdUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Add a user to a channel (only channel owner can add users)
 * @summary Add user to channel
 */
export const postChannelsIdUser = (
    id: number,
    postChannelsIdUserBody: PostChannelsIdUserBody,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<PostChannelsIdUser200>(
      {url: `/channels/${id}/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postChannelsIdUserBody, signal
    },
      );
    }
  


export const getPostChannelsIdUserMutationOptions = <TError = PostChannelsIdUser400 | PostChannelsIdUser401 | PostChannelsIdUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChannelsIdUser>>, TError,{id: number;data: PostChannelsIdUserBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postChannelsIdUser>>, TError,{id: number;data: PostChannelsIdUserBody}, TContext> => {

const mutationKey = ['postChannelsIdUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChannelsIdUser>>, {id: number;data: PostChannelsIdUserBody}> = (props) => {
          const {id,data} = props ?? {};

          return  postChannelsIdUser(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChannelsIdUserMutationResult = NonNullable<Awaited<ReturnType<typeof postChannelsIdUser>>>
    export type PostChannelsIdUserMutationBody = PostChannelsIdUserBody
    export type PostChannelsIdUserMutationError = PostChannelsIdUser400 | PostChannelsIdUser401 | PostChannelsIdUser500

    /**
 * @summary Add user to channel
 */
export const usePostChannelsIdUser = <TError = PostChannelsIdUser400 | PostChannelsIdUser401 | PostChannelsIdUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChannelsIdUser>>, TError,{id: number;data: PostChannelsIdUserBody}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postChannelsIdUser>>,
        TError,
        {id: number;data: PostChannelsIdUserBody},
        TContext
      > => {

      const mutationOptions = getPostChannelsIdUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Remove a user from a channel (only channel owner can remove users)
 * @summary Remove user from channel
 */
export const deleteChannelsIdUser = (
    id: number,
    deleteChannelsIdUserBody: DeleteChannelsIdUserBody,
 ) => {
      
      
      return axiosInstance<DeleteChannelsIdUser200>(
      {url: `/channels/${id}/user`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: deleteChannelsIdUserBody
    },
      );
    }
  


export const getDeleteChannelsIdUserMutationOptions = <TError = DeleteChannelsIdUser400 | DeleteChannelsIdUser401 | DeleteChannelsIdUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteChannelsIdUser>>, TError,{id: number;data: DeleteChannelsIdUserBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteChannelsIdUser>>, TError,{id: number;data: DeleteChannelsIdUserBody}, TContext> => {

const mutationKey = ['deleteChannelsIdUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteChannelsIdUser>>, {id: number;data: DeleteChannelsIdUserBody}> = (props) => {
          const {id,data} = props ?? {};

          return  deleteChannelsIdUser(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteChannelsIdUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteChannelsIdUser>>>
    export type DeleteChannelsIdUserMutationBody = DeleteChannelsIdUserBody
    export type DeleteChannelsIdUserMutationError = DeleteChannelsIdUser400 | DeleteChannelsIdUser401 | DeleteChannelsIdUser500

    /**
 * @summary Remove user from channel
 */
export const useDeleteChannelsIdUser = <TError = DeleteChannelsIdUser400 | DeleteChannelsIdUser401 | DeleteChannelsIdUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteChannelsIdUser>>, TError,{id: number;data: DeleteChannelsIdUserBody}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteChannelsIdUser>>,
        TError,
        {id: number;data: DeleteChannelsIdUserBody},
        TContext
      > => {

      const mutationOptions = getDeleteChannelsIdUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    