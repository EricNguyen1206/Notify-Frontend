/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Notify Chat Service API
 * A RESTful API service for chat functionality
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  ChatServiceInternalModelsChatRequest,
  ChatServiceInternalModelsChatResponse,
  ChatServiceInternalModelsErrorResponse,
  ChatServiceInternalModelsPaginatedChatResponse,
  GetMessagesChannelIdParams
} from '../../schemas';

import { axiosInstance } from '../../axios-config';




/**
 * Create a new chat message (channel or direct)
 * @summary Create a new chat message
 */
export const postMessages = (
    chatServiceInternalModelsChatRequest: ChatServiceInternalModelsChatRequest,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsChatResponse>(
      {url: `/messages/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: chatServiceInternalModelsChatRequest, signal
    },
      );
    }
  


export const getPostMessagesMutationOptions = <TError = ChatServiceInternalModelsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMessages>>, TError,{data: ChatServiceInternalModelsChatRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postMessages>>, TError,{data: ChatServiceInternalModelsChatRequest}, TContext> => {

const mutationKey = ['postMessages'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMessages>>, {data: ChatServiceInternalModelsChatRequest}> = (props) => {
          const {data} = props ?? {};

          return  postMessages(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMessagesMutationResult = NonNullable<Awaited<ReturnType<typeof postMessages>>>
    export type PostMessagesMutationBody = ChatServiceInternalModelsChatRequest
    export type PostMessagesMutationError = ChatServiceInternalModelsErrorResponse

    /**
 * @summary Create a new chat message
 */
export const usePostMessages = <TError = ChatServiceInternalModelsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMessages>>, TError,{data: ChatServiceInternalModelsChatRequest}, TContext>, }
 ): UseMutationResult<
        Awaited<ReturnType<typeof postMessages>>,
        TError,
        {data: ChatServiceInternalModelsChatRequest},
        TContext
      > => {

      const mutationOptions = getPostMessagesMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get all chat messages for a specific channel (paginated)
 * @summary Get chat messages in a channel
 */
export const getMessagesChannelId = (
    id: number,
    params?: GetMessagesChannelIdParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsPaginatedChatResponse>(
      {url: `/messages/channel/${id}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMessagesChannelIdQueryKey = (id: number,
    params?: GetMessagesChannelIdParams,) => {
    return [`/messages/channel/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMessagesChannelIdQueryOptions = <TData = Awaited<ReturnType<typeof getMessagesChannelId>>, TError = ChatServiceInternalModelsErrorResponse>(id: number,
    params?: GetMessagesChannelIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMessagesChannelId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMessagesChannelIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMessagesChannelId>>> = ({ signal }) => getMessagesChannelId(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMessagesChannelId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMessagesChannelIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMessagesChannelId>>>
export type GetMessagesChannelIdQueryError = ChatServiceInternalModelsErrorResponse


/**
 * @summary Get chat messages in a channel
 */

export function useGetMessagesChannelId<TData = Awaited<ReturnType<typeof getMessagesChannelId>>, TError = ChatServiceInternalModelsErrorResponse>(
 id: number,
    params?: GetMessagesChannelIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMessagesChannelId>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMessagesChannelIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



