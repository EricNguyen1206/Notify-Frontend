/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Notify Chat Service API
 * A RESTful API service for chat functionality
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ChatServiceInternalModelsErrorResponse,
  ChatServiceInternalModelsUpdateProfileRequest,
  ChatServiceInternalModelsUserResponse,
  GetUsersSearchParams
} from '../../schemas';

import { axiosInstance } from '../../axios-config';




/**
 * Get the current user's profile information
 * @summary Get user profile
 */
export const getUsersProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsUserResponse>(
      {url: `/users/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetUsersProfileQueryKey = () => {
    return [`/users/profile`] as const;
    }

    
export const getGetUsersProfileQueryOptions = <TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersProfile>>> = ({ signal }) => getUsersProfile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersProfile>>>
export type GetUsersProfileQueryError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse


export function useGetUsersProfile<TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersProfile>>,
          TError,
          Awaited<ReturnType<typeof getUsersProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersProfile<TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersProfile>>,
          TError,
          Awaited<ReturnType<typeof getUsersProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersProfile<TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get user profile
 */

export function useGetUsersProfile<TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersProfileQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update the current user's profile information (username, avatar, password)
 * @summary Update user profile
 */
export const putUsersProfile = (
    chatServiceInternalModelsUpdateProfileRequest: ChatServiceInternalModelsUpdateProfileRequest,
 ) => {
      
      
      return axiosInstance<ChatServiceInternalModelsUserResponse>(
      {url: `/users/profile`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: chatServiceInternalModelsUpdateProfileRequest
    },
      );
    }
  


export const getPutUsersProfileMutationOptions = <TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersProfile>>, TError,{data: ChatServiceInternalModelsUpdateProfileRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putUsersProfile>>, TError,{data: ChatServiceInternalModelsUpdateProfileRequest}, TContext> => {

const mutationKey = ['putUsersProfile'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUsersProfile>>, {data: ChatServiceInternalModelsUpdateProfileRequest}> = (props) => {
          const {data} = props ?? {};

          return  putUsersProfile(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUsersProfileMutationResult = NonNullable<Awaited<ReturnType<typeof putUsersProfile>>>
    export type PutUsersProfileMutationBody = ChatServiceInternalModelsUpdateProfileRequest
    export type PutUsersProfileMutationError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse

    /**
 * @summary Update user profile
 */
export const usePutUsersProfile = <TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersProfile>>, TError,{data: ChatServiceInternalModelsUpdateProfileRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putUsersProfile>>,
        TError,
        {data: ChatServiceInternalModelsUpdateProfileRequest},
        TContext
      > => {

      const mutationOptions = getPutUsersProfileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Search for users by username (partial match for channel creation)
 * @summary Search users by username
 */
export const getUsersSearch = (
    params: GetUsersSearchParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsUserResponse[]>(
      {url: `/users/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUsersSearchQueryKey = (params?: GetUsersSearchParams,) => {
    return [`/users/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUsersSearchQueryOptions = <TData = Awaited<ReturnType<typeof getUsersSearch>>, TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse>(params: GetUsersSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersSearch>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersSearchQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersSearch>>> = ({ signal }) => getUsersSearch(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersSearch>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSearch>>>
export type GetUsersSearchQueryError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse


export function useGetUsersSearch<TData = Awaited<ReturnType<typeof getUsersSearch>>, TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse>(
 params: GetUsersSearchParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersSearch>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersSearch>>,
          TError,
          Awaited<ReturnType<typeof getUsersSearch>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersSearch<TData = Awaited<ReturnType<typeof getUsersSearch>>, TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse>(
 params: GetUsersSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersSearch>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersSearch>>,
          TError,
          Awaited<ReturnType<typeof getUsersSearch>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersSearch<TData = Awaited<ReturnType<typeof getUsersSearch>>, TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse>(
 params: GetUsersSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersSearch>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search users by username
 */

export function useGetUsersSearch<TData = Awaited<ReturnType<typeof getUsersSearch>>, TError = ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse | ChatServiceInternalModelsErrorResponse>(
 params: GetUsersSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersSearch>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersSearchQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



