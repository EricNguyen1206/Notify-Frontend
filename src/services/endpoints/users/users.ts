/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 */
import {
  useQuery
} from 'react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetUsersProfile401,
  GetUsersProfile500,
  ModelsUserResponse
} from '../../schemas';

import { axiosInstance } from '../../axios-config';




/**
 * Get the current user's profile information
 * @summary Get user profile
 */
export const getUsersProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ModelsUserResponse>(
      {url: `/users/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetUsersProfileQueryKey = () => {
    return [`/users/profile`] as const;
    }

    
export const getGetUsersProfileQueryOptions = <TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = GetUsersProfile401 | GetUsersProfile500>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersProfile>>> = ({ signal }) => getUsersProfile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersProfile>>>
export type GetUsersProfileQueryError = GetUsersProfile401 | GetUsersProfile500


/**
 * @summary Get user profile
 */

export function useGetUsersProfile<TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = GetUsersProfile401 | GetUsersProfile500>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersProfileQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



