/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Notify Chat Service API
 * A RESTful API service for chat functionality
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from 'react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  GetWs400,
  GetWsParams
} from '../../schemas';

import { axiosInstance } from '../../axios-config';




/**
 * Establish a WebSocket connection for real-time messaging
 * @summary WebSocket connection
 */
export const getWs = (
    params: GetWsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<unknown>(
      {url: `/ws`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetWsQueryKey = (params: GetWsParams,) => {
    return [`/ws`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWsQueryOptions = <TData = Awaited<ReturnType<typeof getWs>>, TError = GetWs400>(params: GetWsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWs>>> = ({ signal }) => getWs(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWsQueryResult = NonNullable<Awaited<ReturnType<typeof getWs>>>
export type GetWsQueryError = GetWs400


/**
 * @summary WebSocket connection
 */

export function useGetWs<TData = Awaited<ReturnType<typeof getWs>>, TError = GetWs400>(
 params: GetWsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData>, }
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetWsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



