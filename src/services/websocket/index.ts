/**
 * Generated by orval v1.0 üç∫
 * Do not edit manually.
 * Notify Chat Service API
 * A RESTful API service for chat functionality
 * OpenAPI spec version: 1.0
 */

// WebSocket Type-Safe Client
import { MessageType, WsBaseMessage } from '../types/wsTypes';
import { ConnectionState, createWebSocketClient } from '../wsMutator';

// Re-export types for convenience
export { ConnectionState, MessageType };
export type { WsBaseMessage };
export interface ChatServiceInternalModelsChannel {
  created_at?: string;
  deleted_at?: GormDeletedAt;
  id?: number;
  members?: ChatServiceInternalModelsUser[];
  /** Name of the channel */
  name?: string;
  /** ID of the channel owner */
  ownerId?: number;
  /** Type of channel, either 'direct' or 'group' */
  type?: string;
  updated_at?: string;
}

export interface ChatServiceInternalModelsChannelDetailResponse {
  createdAt?: string;
  id?: number;
  /** List of members in the channel */
  members?: ChatServiceInternalModelsUser[];
  name?: string;
  ownerId?: number;
  type?: string;
}

export interface ChatServiceInternalModelsChannelResponse {
  id?: number;
  name?: string;
  ownerId?: number;
  type?: string;
}

export interface ChatServiceInternalModelsChatResponse {
  /** channel */
  channelId?: number;
  /** timestamp of when the message was created */
  createdAt?: string;
  /** optional file name for media */
  fileName?: string;
  id?: number;
  /** Relate to type message */
  receiverId?: number;
  /** url string for avatar */
  senderAvatar?: string;
  /** ID of the user who sent the message */
  senderId?: number;
  /** Username of the sender */
  senderName?: string;
  /** free text message */
  text?: string;
  /** "direct" | "group" */
  type?: string;
  /** optional URL for media */
  url?: string;
}

export interface ChatServiceInternalModelsDirectChannelResponse {
  /** Optional avatar for direct channels */
  avatar?: string;
  id?: number;
  name?: string;
  ownerId?: number;
  type?: string;
}

export interface ChatServiceInternalModelsErrorResponse {
  code?: number;
  details?: string;
  message?: string;
}

export interface ChatServiceInternalModelsLoginRequest {
  email: string;
  password: string;
}

export interface ChatServiceInternalModelsLoginResponse {
  token?: string;
  user?: ChatServiceInternalModelsUserResponse;
}

export interface ChatServiceInternalModelsPaginatedChatResponse {
  items?: ChatServiceInternalModelsChatResponse[];
  nextCursor?: number;
  total?: number;
}

export interface ChatServiceInternalModelsRegisterRequest {
  email: string;
  /** @minLength 6 */
  password: string;
  /**
   * @minLength 3
   * @maxLength 50
   */
  username: string;
}

export interface ChatServiceInternalModelsUser {
  /** Avatar is optional and can be used to store a profile picture URL
It is not mandatory for the user to have an avatar. */
  avatar?: string;
  channels?: ChatServiceInternalModelsChannel[];
  created_at?: string;
  deleted_at?: GormDeletedAt;
  /** Unique email for the user */
  email?: string;
  id?: number;
  updated_at?: string;
  /** Username for the user */
  username?: string;
}

export interface ChatServiceInternalModelsUserChannelsResponse {
  /** List of channels of type 'direct' */
  direct?: ChatServiceInternalModelsDirectChannelResponse[];
  /** List of channels of type 'group' */
  group?: ChatServiceInternalModelsChannelResponse[];
}

export interface ChatServiceInternalModelsUserResponse {
  avatar?: string;
  created_at?: string;
  email?: string;
  id?: number;
  username?: string;
}

export interface GormDeletedAt {
  time?: string;
  /** Valid is true if Time is not NULL */
  valid?: boolean;
}

/**
 * Message type enum
 */
export type WebSocketMessageType = typeof WebSocketMessageType[keyof typeof WebSocketMessageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WebSocketMessageType = {
  connectionconnect: 'connection.connect',
  connectiondisconnect: 'connection.disconnect',
  connectionping: 'connection.ping',
  connectionpong: 'connection.pong',
  channeljoin: 'channel.join',
  channelleave: 'channel.leave',
  channelmessage: 'channel.message',
  channeltyping: 'channel.typing',
  channelstop_typing: 'channel.stop_typing',
  channelmemberjoin: 'channel.member.join',
  channelmemberleave: 'channel.member.leave',
  userstatus: 'user.status',
  usernotification: 'user.notification',
  error: 'error',
} as const;

/**
 * Message payload data
 */
export type WebSocketMessageData = { [key: string]: unknown };

export interface WebSocketMessage {
  /** Unique message identifier */
  id: string;
  /** Message type enum */
  type: WebSocketMessageType;
  /** Message payload data */
  data: WebSocketMessageData;
  /** Unix timestamp */
  timestamp: number;
  /** User ID who sent the message */
  user_id: string;
}

export interface ChannelMessageData {
  channel_id: string;
  text: string;
  /** @nullable */
  url?: string | null;
  /** @nullable */
  fileName?: string | null;
}

export interface TypingIndicatorData {
  channel_id: string;
  is_typing: boolean;
}

export interface ErrorData {
  code: string;
  message: string;
  details?: string;
}

export type GetWsParams = {
/**
 * User ID for WebSocket connection
 */
userId: string;
};

export type GetWs400 = { [key: string]: unknown };

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  export const getNotifyChatServiceAPI = () => {
/**
 * Establish a WebSocket connection for real-time messaging with typed message support.

## Message Types
The WebSocket API uses typed messages with the following enum values:

### Connection Events
- `connection.connect` - Connection established (server -> client)
- `connection.disconnect` - Connection closed (server -> client)
- `connection.ping` - Ping message (client -> server)
- `connection.pong` - Pong response (server -> client)

### Channel Events
- `channel.join` - Join a channel (client -> server)
- `channel.leave` - Leave a channel (client -> server)
- `channel.message` - Send/receive channel message (bidirectional)
- `channel.typing` - Typing indicator (client -> server)
- `channel.stop_typing` - Stop typing indicator (client -> server)

### Channel Member Events
- `channel.member.join` - Member joined channel (server -> client)
- `channel.member.leave` - Member left channel (server -> client)

### User Events
- `user.status` - User status update (server -> client)
- `user.notification` - User notification (server -> client)

### Error Events
- `error` - Error message (server -> client)

## Message Format
All messages follow this JSON structure:
```json
{
"id": "unique-message-id",
"type": "message-type-enum",
"data": { /* type-specific data *\/ },
"timestamp": 1234567890,
"user_id": "user-id"
}
```

## Example Messages

### Join Channel
```json
{
"id": "msg-123",
"type": "channel.join",
"data": { "channel_id": "channel-123" },
"timestamp": 1234567890,
"user_id": "user-456"
}
```

### Send Message
```json
{
"id": "msg-456",
"type": "channel.message",
"data": {
"channel_id": "channel-123",
"text": "Hello world!",
"url": null,
"fileName": null
},
"timestamp": 1234567890,
"user_id": "user-456"
}
```

### Error Response
```json
{
"id": "error-789",
"type": "error",
"data": {
"code": "INVALID_MESSAGE",
"message": "Invalid message format"
},
"timestamp": 1234567890,
"user_id": "user-456"
}
```
 * @summary WebSocket connection for real-time messaging
 */
const getWs = (
    params: GetWsParams,
 options?: SecondParameter<typeof createWebSocketClient>,) => {
      return createWebSocketClient<unknown>(
      {url: `/ws`, method: 'GET',
        params
    },
      options);
    }

return {getWs}};
export type GetWsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getNotifyChatServiceAPI>['getWs']>>>
